/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AngleService } from "../angle.service";
import { AngleCreateInput } from "./AngleCreateInput";
import { Angle } from "./Angle";
import { AngleFindManyArgs } from "./AngleFindManyArgs";
import { AngleWhereUniqueInput } from "./AngleWhereUniqueInput";
import { AngleUpdateInput } from "./AngleUpdateInput";

export class AngleControllerBase {
  constructor(protected readonly service: AngleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Angle })
  async createAngle(@common.Body() data: AngleCreateInput): Promise<Angle> {
    return await this.service.createAngle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Angle] })
  @ApiNestedQuery(AngleFindManyArgs)
  async angles(@common.Req() request: Request): Promise<Angle[]> {
    const args = plainToClass(AngleFindManyArgs, request.query);
    return this.service.angles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Angle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async angle(
    @common.Param() params: AngleWhereUniqueInput
  ): Promise<Angle | null> {
    const result = await this.service.angle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Angle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAngle(
    @common.Param() params: AngleWhereUniqueInput,
    @common.Body() data: AngleUpdateInput
  ): Promise<Angle | null> {
    try {
      return await this.service.updateAngle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Angle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAngle(
    @common.Param() params: AngleWhereUniqueInput
  ): Promise<Angle | null> {
    try {
      return await this.service.deleteAngle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
